/* automatically generated by rust-bindgen 0.61.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const PG_CONTROL_FILE_SIZE: u32 = 8192;
pub const XLOG_PAGE_MAGIC: u32 = 53520;
pub type Oid = ::std::os::raw::c_uint;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
pub type int64 = ::std::os::raw::c_long;
pub type uint64 = ::std::os::raw::c_ulong;
pub type TransactionId = uint32;
pub type MultiXactId = TransactionId;
pub type MultiXactOffset = uint32;
pub type XLogRecPtr = uint64;
pub type XLogSegNo = uint64;
pub type TimeLineID = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct FullTransactionId {
    pub value: uint64,
}
#[test]
fn bindgen_test_layout_FullTransactionId() {
    const UNINIT: ::std::mem::MaybeUninit<FullTransactionId> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FullTransactionId>(),
        8usize,
        concat!("Size of: ", stringify!(FullTransactionId))
    );
    assert_eq!(
        ::std::mem::align_of::<FullTransactionId>(),
        8usize,
        concat!("Alignment of ", stringify!(FullTransactionId))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FullTransactionId),
            "::",
            stringify!(value)
        )
    );
}
pub type pg_time_t = int64;
pub type pg_crc32c = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct CheckPoint {
    pub redo: XLogRecPtr,
    pub ThisTimeLineID: TimeLineID,
    pub PrevTimeLineID: TimeLineID,
    pub fullPageWrites: bool,
    pub __bindgen_padding_0: [u8; 7usize],
    pub nextXid: FullTransactionId,
    pub nextOid: Oid,
    pub nextMulti: MultiXactId,
    pub nextMultiOffset: MultiXactOffset,
    pub oldestXid: TransactionId,
    pub oldestXidDB: Oid,
    pub oldestMulti: MultiXactId,
    pub oldestMultiDB: Oid,
    pub __bindgen_padding_1: [u8; 4usize],
    pub time: pg_time_t,
    pub oldestCommitTsXid: TransactionId,
    pub newestCommitTsXid: TransactionId,
    pub oldestActiveXid: TransactionId,
    pub __bindgen_padding_2: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_CheckPoint() {
    const UNINIT: ::std::mem::MaybeUninit<CheckPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CheckPoint>(),
        88usize,
        concat!("Size of: ", stringify!(CheckPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CheckPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CheckPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(redo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThisTimeLineID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(ThisTimeLineID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrevTimeLineID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(PrevTimeLineID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullPageWrites) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(fullPageWrites)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextXid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(nextXid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextOid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(nextOid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextMulti) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(nextMulti)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextMultiOffset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(nextMultiOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestXid) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestXid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestXidDB) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestXidDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestMulti) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestMulti)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestMultiDB) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestMultiDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestCommitTsXid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestCommitTsXid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newestCommitTsXid) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(newestCommitTsXid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldestActiveXid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CheckPoint),
            "::",
            stringify!(oldestActiveXid)
        )
    );
}
pub const DBState_DB_STARTUP: DBState = 0;
pub const DBState_DB_SHUTDOWNED: DBState = 1;
pub const DBState_DB_SHUTDOWNED_IN_RECOVERY: DBState = 2;
pub const DBState_DB_SHUTDOWNING: DBState = 3;
pub const DBState_DB_IN_CRASH_RECOVERY: DBState = 4;
pub const DBState_DB_IN_ARCHIVE_RECOVERY: DBState = 5;
pub const DBState_DB_IN_PRODUCTION: DBState = 6;
pub type DBState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct ControlFileData {
    pub system_identifier: uint64,
    pub pg_control_version: uint32,
    pub catalog_version_no: uint32,
    pub state: DBState,
    pub __bindgen_padding_0: [u8; 4usize],
    pub time: pg_time_t,
    pub checkPoint: XLogRecPtr,
    pub checkPointCopy: CheckPoint,
    pub unloggedLSN: XLogRecPtr,
    pub minRecoveryPoint: XLogRecPtr,
    pub minRecoveryPointTLI: TimeLineID,
    pub __bindgen_padding_1: [u8; 4usize],
    pub backupStartPoint: XLogRecPtr,
    pub backupEndPoint: XLogRecPtr,
    pub backupEndRequired: bool,
    pub __bindgen_padding_2: [u8; 3usize],
    pub wal_level: ::std::os::raw::c_int,
    pub wal_log_hints: bool,
    pub __bindgen_padding_3: [u8; 3usize],
    pub MaxConnections: ::std::os::raw::c_int,
    pub max_worker_processes: ::std::os::raw::c_int,
    pub max_wal_senders: ::std::os::raw::c_int,
    pub max_prepared_xacts: ::std::os::raw::c_int,
    pub max_locks_per_xact: ::std::os::raw::c_int,
    pub track_commit_timestamp: bool,
    pub __bindgen_padding_4: [u8; 3usize],
    pub maxAlign: uint32,
    pub floatFormat: f64,
    pub blcksz: uint32,
    pub relseg_size: uint32,
    pub xlog_blcksz: uint32,
    pub xlog_seg_size: uint32,
    pub nameDataLen: uint32,
    pub indexMaxKeys: uint32,
    pub toast_max_chunk_size: uint32,
    pub loblksize: uint32,
    pub float8ByVal: bool,
    pub __bindgen_padding_5: [u8; 3usize],
    pub data_checksum_version: uint32,
    pub mock_authentication_nonce: [::std::os::raw::c_char; 32usize],
    pub crc: pg_crc32c,
    pub __bindgen_padding_6: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_ControlFileData() {
    const UNINIT: ::std::mem::MaybeUninit<ControlFileData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ControlFileData>(),
        296usize,
        concat!("Size of: ", stringify!(ControlFileData))
    );
    assert_eq!(
        ::std::mem::align_of::<ControlFileData>(),
        8usize,
        concat!("Alignment of ", stringify!(ControlFileData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(system_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pg_control_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(pg_control_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catalog_version_no) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(catalog_version_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checkPoint) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(checkPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checkPointCopy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(checkPointCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unloggedLSN) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(unloggedLSN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRecoveryPoint) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(minRecoveryPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minRecoveryPointTLI) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(minRecoveryPointTLI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backupStartPoint) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(backupStartPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backupEndPoint) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(backupEndPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backupEndRequired) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(backupEndRequired)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wal_level) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(wal_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wal_log_hints) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(wal_log_hints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxConnections) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(MaxConnections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_worker_processes) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(max_worker_processes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wal_senders) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(max_wal_senders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_prepared_xacts) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(max_prepared_xacts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_locks_per_xact) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(max_locks_per_xact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).track_commit_timestamp) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(track_commit_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAlign) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(maxAlign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatFormat) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(floatFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blcksz) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(blcksz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relseg_size) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(relseg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlog_blcksz) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(xlog_blcksz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlog_seg_size) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(xlog_seg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameDataLen) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(nameDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexMaxKeys) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(indexMaxKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toast_max_chunk_size) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(toast_max_chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loblksize) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(loblksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float8ByVal) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(float8ByVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_checksum_version) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(data_checksum_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mock_authentication_nonce) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(mock_authentication_nonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ControlFileData),
            "::",
            stringify!(crc)
        )
    );
}
pub type RmgrId = uint8;
pub type BlockNumber = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct XLogRecord {
    pub xl_tot_len: uint32,
    pub xl_xid: TransactionId,
    pub xl_prev: XLogRecPtr,
    pub xl_info: uint8,
    pub xl_rmid: RmgrId,
    pub __bindgen_padding_0: [u8; 2usize],
    pub xl_crc: pg_crc32c,
}
#[test]
fn bindgen_test_layout_XLogRecord() {
    const UNINIT: ::std::mem::MaybeUninit<XLogRecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XLogRecord>(),
        24usize,
        concat!("Size of: ", stringify!(XLogRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogRecord>(),
        8usize,
        concat!("Alignment of ", stringify!(XLogRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_tot_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_tot_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_xid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_xid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_rmid) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_rmid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xl_crc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogRecord),
            "::",
            stringify!(xl_crc)
        )
    );
}
pub type TimestampTz = int64;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct XLogPageHeaderData {
    pub xlp_magic: uint16,
    pub xlp_info: uint16,
    pub xlp_tli: TimeLineID,
    pub xlp_pageaddr: XLogRecPtr,
    pub xlp_rem_len: uint32,
    pub __bindgen_padding_0: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_XLogPageHeaderData() {
    const UNINIT: ::std::mem::MaybeUninit<XLogPageHeaderData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XLogPageHeaderData>(),
        24usize,
        concat!("Size of: ", stringify!(XLogPageHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogPageHeaderData>(),
        8usize,
        concat!("Alignment of ", stringify!(XLogPageHeaderData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogPageHeaderData),
            "::",
            stringify!(xlp_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_info) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogPageHeaderData),
            "::",
            stringify!(xlp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_tli) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogPageHeaderData),
            "::",
            stringify!(xlp_tli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_pageaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogPageHeaderData),
            "::",
            stringify!(xlp_pageaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_rem_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogPageHeaderData),
            "::",
            stringify!(xlp_rem_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Default, Serialize, Deserialize)]
pub struct XLogLongPageHeaderData {
    pub std: XLogPageHeaderData,
    pub xlp_sysid: uint64,
    pub xlp_seg_size: uint32,
    pub xlp_xlog_blcksz: uint32,
}
#[test]
fn bindgen_test_layout_XLogLongPageHeaderData() {
    const UNINIT: ::std::mem::MaybeUninit<XLogLongPageHeaderData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XLogLongPageHeaderData>(),
        40usize,
        concat!("Size of: ", stringify!(XLogLongPageHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<XLogLongPageHeaderData>(),
        8usize,
        concat!("Alignment of ", stringify!(XLogLongPageHeaderData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogLongPageHeaderData),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_sysid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogLongPageHeaderData),
            "::",
            stringify!(xlp_sysid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_seg_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogLongPageHeaderData),
            "::",
            stringify!(xlp_seg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlp_xlog_blcksz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XLogLongPageHeaderData),
            "::",
            stringify!(xlp_xlog_blcksz)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ItemIdData {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_ItemIdData() {
    assert_eq!(
        ::std::mem::size_of::<ItemIdData>(),
        4usize,
        concat!("Size of: ", stringify!(ItemIdData))
    );
    assert_eq!(
        ::std::mem::align_of::<ItemIdData>(),
        4usize,
        concat!("Alignment of ", stringify!(ItemIdData))
    );
}
impl ItemIdData {
    #[inline]
    pub fn lp_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lp_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lp_len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_lp_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lp_off: ::std::os::raw::c_uint,
        lp_flags: ::std::os::raw::c_uint,
        lp_len: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let lp_off: u32 = unsafe { ::std::mem::transmute(lp_off) };
            lp_off as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let lp_flags: u32 = unsafe { ::std::mem::transmute(lp_flags) };
            lp_flags as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let lp_len: u32 = unsafe { ::std::mem::transmute(lp_len) };
            lp_len as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type OffsetNumber = uint16;
pub type LocationIndex = uint16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PageXLogRecPtr {
    pub xlogid: uint32,
    pub xrecoff: uint32,
}
#[test]
fn bindgen_test_layout_PageXLogRecPtr() {
    const UNINIT: ::std::mem::MaybeUninit<PageXLogRecPtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PageXLogRecPtr>(),
        8usize,
        concat!("Size of: ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<PageXLogRecPtr>(),
        4usize,
        concat!("Alignment of ", stringify!(PageXLogRecPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xlogid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xlogid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrecoff) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PageXLogRecPtr),
            "::",
            stringify!(xrecoff)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct PageHeaderData {
    pub pd_lsn: PageXLogRecPtr,
    pub pd_checksum: uint16,
    pub pd_flags: uint16,
    pub pd_lower: LocationIndex,
    pub pd_upper: LocationIndex,
    pub pd_special: LocationIndex,
    pub pd_pagesize_version: uint16,
    pub pd_prune_xid: TransactionId,
    pub pd_linp: __IncompleteArrayField<ItemIdData>,
}
#[test]
fn bindgen_test_layout_PageHeaderData() {
    const UNINIT: ::std::mem::MaybeUninit<PageHeaderData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PageHeaderData>(),
        24usize,
        concat!("Size of: ", stringify!(PageHeaderData))
    );
    assert_eq!(
        ::std::mem::align_of::<PageHeaderData>(),
        4usize,
        concat!("Alignment of ", stringify!(PageHeaderData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_lsn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_lsn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_checksum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_lower) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_upper) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_special) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_special)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_pagesize_version) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_pagesize_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_prune_xid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_prune_xid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_linp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PageHeaderData),
            "::",
            stringify!(pd_linp)
        )
    );
}
pub const MultiXactStatus_MultiXactStatusForKeyShare: MultiXactStatus = 0;
pub const MultiXactStatus_MultiXactStatusForShare: MultiXactStatus = 1;
pub const MultiXactStatus_MultiXactStatusForNoKeyUpdate: MultiXactStatus = 2;
pub const MultiXactStatus_MultiXactStatusForUpdate: MultiXactStatus = 3;
pub const MultiXactStatus_MultiXactStatusNoKeyUpdate: MultiXactStatus = 4;
pub const MultiXactStatus_MultiXactStatusUpdate: MultiXactStatus = 5;
pub type MultiXactStatus = ::std::os::raw::c_uint;
